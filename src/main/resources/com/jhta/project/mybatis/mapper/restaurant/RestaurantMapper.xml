<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jhta.project.mybatis.mapper.restaurant.RestaurantMapper">
	<resultMap type="com.jhta.project.service.security.CustomUserDetail" id="userDetail">
		<id property="userid" column="r_id"/>
		<result property="password" column="r_pwd"/>
		<result property="enabled" column="r_state"/>
		<collection property="authList" ofType="com.jhta.project.vo.security.AuthorityVo">
			<result property="au_id" column="au_id"/>
			<result property="au_authority" column="au_authority"/>
		</collection>
	</resultMap>
	<select id="getAuths" parameterType="String" resultMap="userDetail">
		select * from restaurant r, authority a
		where r.r_id=a.au_id and r.r_id=#{r_id}
	</select>
	<insert id="restaurantInsert" parameterType="com.jhta.project.vo.restaurant.RestaurantVo">
		insert into restaurant values(#{r_id}, #{r_pwd}, #{r_name}, #{r_addr}, #{r_minCost}, #{r_delCost}, #{r_img}, #{r_state}, #{r_info}, sysdate, #{cg_name},#{r_coordx},#{r_coordy},#{r_delmin},#{r_delmax},#{r_email})
	</insert>
	<!-- 카테고리 불러오기 -->
	<select id="getCategory" resultType="com.jhta.project.vo.restaurant.CategoryVo">
		select * 
		from category
	</select>
	<!-- 판매자 정보 수정 -->
	<update id="sellerUpdate" parameterType="com.jhta.project.vo.restaurant.RestaurantVo">
		update restaurant
		set
		r_name = #{r_name},
		cg_name = #{cg_name},
		r_addr = #{r_addr},
		r_minCost = #{r_minCost},
		r_delCost = #{r_delCost},
		<if test="r_img != null">
			r_img = #{r_img},
		</if>
		r_info = #{r_info},
		r_coordx = #{r_coordx},
		r_coordy = #{r_coordy}
		where
		r_id = #{r_id}
	</update>
	<!-- 판매자 비밀번호 변경 -->
	<update id="sellerPwdChange" parameterType="hashmap">
		update restaurant
		set
		r_pwd = #{r_pwd}
		where
		r_id = #{r_id}
	</update>
	<insert id="addAuth" parameterType="com.jhta.project.vo.security.AuthorityVo">
		insert into authority values(#{au_id},#{au_authority})
	</insert>
	<!-- 상태 공지 수정 -->
	<update id="infoUpdate" parameterType="com.jhta.project.vo.restaurant.RestaurantVo">
		update restaurant set r_name=#{r_name},r_minCost=#{r_minCost},r_delCost=#{r_delCost},
		<if test="r_img != null">
			r_img = #{r_img},
		</if>
		r_info=#{r_info},
		cg_name=#{cg_name},r_delmin=#{r_delmin},r_delmax=#{r_delmax},r_state=#{r_state} where r_id=#{r_id}
	</update>
	<select id="restaurantinfo" parameterType="String" resultType="com.jhta.project.vo.restaurant.RestaurantVo">
		select r_name,r_minCost,r_delCost,r_img,r_info,r_delmin,r_delmax,r_state from restaurant where r_id=#{r_id}
	</select>
	<select id="idCheck" parameterType="string" resultType="com.jhta.project.vo.restaurant.RestaurantVo">
		select * from restaurant where r_id = #{r_id}
	</select>
	<!-- 메뉴 등록 -->
	<insert id="menuAdd" parameterType="com.jhta.project.vo.restaurant.FoodVo">
		insert into food values(food_seq.nextval, #{food_name}, #{r_id}, #{food_img}, #{food_cost}, #{food_info}, #{food_status})
	</insert>
	<!-- 사이드 메뉴 추가 -->
	<insert id="sideAdd" parameterType="com.jhta.project.vo.restaurant.FoodOptionVo">
		insert into food_options values(food_options_seq.nextval, #{food_num}, #{fo_name}, #{fo_cost}, #{fo_category})
	</insert>
	<!-- 해당 매장 메뉴 불러오기 -->
	<select id="menuList" parameterType="string" resultType="com.jhta.project.vo.restaurant.FoodVo">
		select food_num, food_name, food_info, food_img, food_cost, food_status
		from restaurant r, food f
		where r.r_id = f.r_id and r.r_id = #{r_id}
	</select>
	<!-- food_num에 해당되는 메뉴 불러오기 -->
	<select id="getFood" parameterType="int" resultType="com.jhta.project.vo.restaurant.FoodVo">
		select * from food where food_num = #{food_num}
	</select>
	<!-- fo_num에 해당되는 사이드 메뉴 불어오기 -->
	<select id="getOption" parameterType="int" resultType="com.jhta.project.vo.restaurant.FoodOptionVo">
		select * 
		from food_options
		where fo_num = #{fo_num}
	</select>
	<!-- 등록한 음식 검색 -->
	<select id="foodSearch" parameterType="hashmap" resultType="com.jhta.project.vo.restaurant.FoodVo">
		select * 
		from food
		where food_name like '%' || #{food_search} || '%' and r_id = #{r_id}
	</select>
	<!-- 메뉴 수정 -->
	<update id="foodUpdate" parameterType="com.jhta.project.vo.restaurant.FoodVo">
		update food
		set 
		food_name = #{food_name},
		<if test="food_img != null">
			food_img = #{food_img},
		</if>
		food_cost = #{food_cost},
		food_info = #{food_info}
		where
		food_num = #{food_num}
	</update>
	<!-- 사이드 메뉴 수정 -->
	<update id="optionUpdate" parameterType="com.jhta.project.vo.restaurant.FoodOptionVo">
		update food_options
		set
		fo_name = #{fo_name},
		fo_cost = #{fo_cost}
		where
		fo_num = #{fo_num}
	</update>
	<!-- 메뉴 삭제 -->
	<delete id="foodDelete" parameterType="int">
		begin
			delete food_options
			where food_num = #{food_num};
			delete food
			where food_num = #{food_num};
		end;
	</delete>
	<!-- 사이드 메뉴 삭제 -->
	<delete id="optionDelete" parameterType="int">
		delete food_options
		where fo_num = #{fo_num}
	</delete>
	<!-- 사이드 메뉴 불러오기 -->
	<select id="optionSelect" parameterType="int" resultType="com.jhta.project.vo.restaurant.FoodOptionVo">
		select *
		from food_options
		where food_num = #{food_num}
		order by fo_category
	</select>
	<!-- 메뉴 품절 처리 -->
	<update id="SoldOut" parameterType="hashMap">
		update food
		set
		<choose>
			<when test="food_status == 0">
				food_status = 1
			</when>
			<otherwise>
				food_status = 0
			</otherwise>
		</choose>
		where food_num = #{food_num}
	</update>
	<select id="selectChart" parameterType="String" resultType="com.jhta.project.vo.restaurant.RestaurantVo">
		select r_minCost,r_delCost from restaurant where r_id=#{r_id}
	</select>
	
	<select id="selectSalesDay" parameterType="hashmap" resultType="com.jhta.project.vo.restaurant.OrderListVo">
		select TO_CHAR(or_regdate, 'YY/MM/DD') as sales_day, sum(or_totalcost) or_totalcost
		from orders o inner join orders_detail d on o.or_num = d.or_num inner join food f on d.food_num = f.food_num 
		where f.r_id = #{r_id} and or_regdate between #{s_date} and #{e_date}
		GROUP BY to_char(or_regdate, 'YY/MM/DD') 
		order by sales_day
	</select>
	<select id="selectSalesMonth" parameterType="hashmap" resultType="com.jhta.project.vo.restaurant.OrderListVo">
		select TO_CHAR(or_regdate, 'YY/MM') as sales_month, sum(or_totalcost) or_totalcost
		from orders o inner join orders_detail d on o.or_num = d.or_num inner join food f on d.food_num = f.food_num 
		where f.r_id = #{r_id} and or_regdate between #{s_date} and #{e_date}
		GROUP BY to_char(or_regdate, 'YY/MM') 
		order by sales_month
	</select>
	<select id="selectSalesYear" parameterType="hashmap" resultType="com.jhta.project.vo.restaurant.OrderListVo">
		select TO_CHAR(or_regdate, 'YY') as sales_year, sum(or_totalcost) or_totalcost
		from orders o inner join orders_detail d on o.or_num = d.or_num inner join food f on d.food_num = f.food_num 
		where f.r_id = #{r_id} and or_regdate between #{s_date} and #{e_date}
		GROUP BY to_char(or_regdate, 'YY') 
		order by sales_year
	</select>
	<!-- 주문 내역 불러오기 -->
	<select id="getOrders" parameterType="string" resultType="com.jhta.project.vo.user.OrdersVo">
		select distinct
		o.or_num,
		or_request,
		or_regdate,
		or_totalcost,
		or_status
		from orders o,
			 orders_detail od,
			 food f	 
		where
		o.or_num = od.or_num
		and
		od.food_num = f.food_num
		and
		or_status in(1, 2)
		and
		f.r_id = #{r_id}
	</select>
	<select id="getMenuUnion" parameterType="string" resultType="com.jhta.project.vo.restaurant.MenuUnionVo">
		select
		o.or_num,
		or_request,
		f.food_num,
		1 as fo_num,
		food_name,
		null as fo_name,
		count(food_name)as food_count,
		sum(food_cost) as food_cost_sum,
		or_totalcost,
		or_regdate
		from orders o, 
		     orders_detail od,
		     food f
		where
		o.or_num = od.or_num 
		and 
		od.food_num = f.food_num
		and
		or_status in(1, 2)
		and
		f.r_id = 'zxc'
		group by 
		o.or_num,
		or_request,
		f.food_num,
		food_name,
		or_totalcost,
		or_regdate
		union all
		select
		o.or_num,
		or_request,
		fo.food_num,
		fo.fo_num,
		null,
		fo_name,
		oo_count,
		oo_count * fo_cost as option_cost_sum,
		or_totalcost,
		o.or_regdate
		from orders o, 
		     orders_detail od,
		     orders_option oo,
		     food f,
		     food_options fo
		where
		o.or_num = od.or_num 
		and 
		od.od_num = oo.od_num
		and
		f.food_num = fo.food_num
		and
		oo.fo_num = fo.fo_num
		and 
		or_status in(1, 2)
		and
		f.r_id = 'zxc'
		order by food_num, fo_num
	</select>
	<!-- 주문 내역 불러오기 end -->
	
	<!-- 주문 취소 -->
	<update id="orderCancel" parameterType="int">
		update orders
		set
		or_status = 5
		where
		or_num = #{or_num}
	</update>
	<!-- 취소된 주문 불러오기 -->
	<select id="cancelList" parameterType="string" resultType="com.jhta.project.vo.restaurant.MenuUnionVo">
		select distinct 
		o.or_num
		from orders o,
		     orders_detail od,
		     food f
		where 
		o.or_num = od.or_num
		and
		od.food_num = f.food_num
		and
		or_status = 5
		and
		r_id = #{r_id}
	</select>
	<!-- 회원탈퇴 -->
	<update id="sellerDelete" parameterType="string">
		update restaurant
		set
		r_state = 0
		where
		r_id = #{r_id}
	</update>
	<!-- 주문 수락 -->
	<update id="orderAccept" parameterType="hashmap">
		update orders
		set
		or_status = 2,
		or_deltime = #{or_deltime}
		where
		or_num = #{or_num}
	</update>
	<!-- 배달 시작 -->
	<update id="deliveryStart" parameterType="int">
		update orders
		set
		or_status = 3
		where
		or_num = #{or_num}
	</update>
	<!-- 접수된 주문 수(삭제 예정)-->
	<!-- <select id="orderCount" parameterType="string" resultType="int">
		select
		count(distinct o.or_num)
		from 
		orders o,
		orders_detail od,
		food f
		where
		o.or_num = od.or_num
		and
		od.food_num = f.food_num
		and
		or_status = 1
		and
		r_id = #{r_id}
	</select> -->
</mapper>